{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDQAQmqIePcpquH-ZY2Saee7NrRxRdgZyI\",\n  authDomain: \"camcover-8f344.firebaseapp.com\",\n  projectId: \"camcover-8f344\",\n  storageBucket: \"camcover-8f344.appspot.com\",\n  messagingSenderId: \"426448216056\",\n  appId: \"1:426448216056:web:d6e5c46c67aa5db351400d\"\n}; // функція створює новий документ у Firebase колекції users\n// userAuth - це обєкт, який нам прилетів після того як юзер верифікувався через Google\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // snapshot просто представляє, показує Дані\n  // створюємо документ в колекції, поміщаючи туди дані\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth; // ці дані ми берем з обєкта, який прилетів, коли юзер верифікувався\n\n    const createdAt = new Date(); // час коли документ створено\n\n    try {\n      await userRef.set({\n        // .set() метод відповідає за створення\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef; // вертаємо дані юзера, щоб мати можливість використати їх десь у коді, програмі\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; // функція яка конвертує масив, який ми отримуємо з фаєрбейза в Обєкт\n//\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // ця функція присвоює ключі нашим обєктам і вертає нові обєкти з ключами\n  // імя ключа береться із title (все тільки з маленької букви)\n\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // утиліта, яка дозволє нам з допомогою Проміса, отримати обєкт юзера з фаєрбейзу\n// щоб провірити через саги, чи юзер залогінений, чи ні\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/Andrew_AJ/Documents/REPO/ReactCourse2021/covercam/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyDQAQmqIePcpquH-ZY2Saee7NrRxRdgZyI\",\n  authDomain: \"camcover-8f344.firebaseapp.com\",\n  projectId: \"camcover-8f344\",\n  storageBucket: \"camcover-8f344.appspot.com\",\n  messagingSenderId: \"426448216056\",\n  appId: \"1:426448216056:web:d6e5c46c67aa5db351400d\",\n};\n\n// функція створює новий документ у Firebase колекції users\n// userAuth - це обєкт, який нам прилетів після того як юзер верифікувався через Google\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // snapshot просто представляє, показує Дані\n\n  // створюємо документ в колекції, поміщаючи туди дані\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth; // ці дані ми берем з обєкта, який прилетів, коли юзер верифікувався\n    const createdAt = new Date(); // час коли документ створено\n    try {\n      await userRef.set({\n        // .set() метод відповідає за створення\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef; // вертаємо дані юзера, щоб мати можливість використати їх десь у коді, програмі\n};\n\nexport const addCollectionsAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\n// функція яка конвертує масив, який ми отримуємо з фаєрбейза в Обєкт\n//\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollections = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  // ця функція присвоює ключі нашим обєктам і вертає нові обєкти з ключами\n  // імя ключа береться із title (все тільки з маленької букви)\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n// утиліта, яка дозволє нам з допомогою Проміса, отримати обєкт юзера з фаєрбейзу\n// щоб провірити через саги, чи юзер залогінений, чи ні\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}