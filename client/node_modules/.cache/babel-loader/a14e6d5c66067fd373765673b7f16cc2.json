{"ast":null,"code":"import { takeEvery, put, all, call, takeLatest } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth); // створюємо юзер-референс з допомогою функції, яку ми створили в утілітах фаєрбезу\n\n    const userSnapshot = yield userRef.get(); // беремо снепшот юзера з цього юзер-референса\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }) // поміщаємо айді та інші дані юзера в редюсер. з допомогою екшена\n    );\n  } catch (error) {\n    yield put(signInFailure({\n      error: error\n    })); // виводимо і поміщаємо в редюсер помилку\n  }\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // отримуємо юзера з фаєрбейзового метода\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure({\n      error: error\n    }));\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure({\n      error: error\n    }));\n  }\n} // сага отримує Проміс відповідь з фаєрбейзової утиліти\n// якщо обєкта юзера нема, ми покидаємо функцію\n// якщо обєкт юзера є, тоді ми викликаємо функцію, яка поміщає обєкт юзера в редюсер\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // сага слухає на екшн, який приходить з компонента, для провірки юзера\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeEvery(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport function* onEmailSignInStart() {\n  yield takeEvery(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["/Users/Andrew_AJ/Documents/REPO/ReactCourse2021/covercam/src/redux/user/user.sagas.js"],"names":["takeEvery","put","all","call","takeLatest","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,UAApC,QAAsD,oBAAtD;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAOA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BG,QAA5B,CAA1B,CADE,CAC+D;;AACjE,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAFE,CAEwC;;AAC1C,UAAMf,GAAG,CACPK,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADN,CACwD;AADxD,KAAT;AAGD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACM,aAAa,CAAC;AAAEY,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAd,CAAT,CADc,CAC8B;AAC7C;AACF;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC9B,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB,CADE,CAC2D;;AAC7D,UAAMG,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACM,aAAa,CAAC;AAAEY,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUI,WAAV,CAAsB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAAtB,EAAwD;AAC7D,MAAI;AACF,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACM,aAAa,CAAC;AAAEY,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;;AACA,OAAO,UAAUS,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAJD,CAIE,OAAOM,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACM,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUU,kBAAV,GAA+B;AACpC,QAAMzB,UAAU,CAACC,eAAe,CAACyB,kBAAjB,EAAqCF,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUG,mBAAV,GAAgC;AACrC,QAAM/B,SAAS,CAACK,eAAe,CAAC2B,oBAAjB,EAAuCZ,YAAvC,CAAf;AACD;AAED,OAAO,UAAUa,kBAAV,GAA+B;AACpC,QAAMjC,SAAS,CAACK,eAAe,CAAC6B,mBAAjB,EAAsCX,WAAtC,CAAf;AACD;AAED,eAAe,UAAUY,SAAV,GAAsB;AACnC,QAAMjC,GAAG,CAAC,CACRC,IAAI,CAAC4B,mBAAD,CADI,EAER5B,IAAI,CAAC8B,kBAAD,CAFI,EAGR9B,IAAI,CAACyB,mBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeEvery, put, all, call, takeLatest } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth); // створюємо юзер-референс з допомогою функції, яку ми створили в утілітах фаєрбезу\n    const userSnapshot = yield userRef.get(); // беремо снепшот юзера з цього юзер-референса\n    yield put(\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }) // поміщаємо айді та інші дані юзера в редюсер. з допомогою екшена\n    );\n  } catch (error) {\n    yield put(signInFailure({ error: error })); // виводимо і поміщаємо в редюсер помилку\n  }\n}\n\nexport function* googleSignIn() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider); // отримуємо юзера з фаєрбейзового метода\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure({ error: error }));\n  }\n}\n\nexport function* emailSignIn({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure({ error: error }));\n  }\n}\n\n// сага отримує Проміс відповідь з фаєрбейзової утиліти\n// якщо обєкта юзера нема, ми покидаємо функцію\n// якщо обєкт юзера є, тоді ми викликаємо функцію, яка поміщає обєкт юзера в редюсер\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// сага слухає на екшн, який приходить з компонента, для провірки юзера\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeEvery(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeEvery(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\n\nexport default function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(isUserAuthenticated),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}